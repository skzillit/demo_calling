plugins {
    id 'com.android.library'
    id 'signing'
    id 'maven-publish'
}

// Source of webrtc.
def WEBRTC_INC_PATH = "${projectDir}/deps/webrtc/src"
// Precompiled static libs and jar for webrtc android.
def WEBRTC_LIB_PATH = "${projectDir}/deps/webrtc/lib"

android {
    compileSdkVersion 31
    ndkVersion '22.0.7026061'

    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 31
        versionCode 340
        versionName '3.4.0'

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                // Passes optional arguments to CMake.
                arguments "-DLIBWEBRTC_INCLUDE_PATH=" + WEBRTC_INC_PATH,
                        "-DLIBWEBRTC_BINARY_PATH=" + WEBRTC_LIB_PATH,
                        "-DMEDIASOUPCLIENT_BUILD_TESTS=false",
                        "-DSDPTRANSFORM_BUILD_TESTS=OFF",
                        "-DSDPTRANSFORM_BUILD_READMEHELPER=OFF",
                        "-DMEDIASOUPCLIENT_LOG_TRACE=ON",
                        "-DMEDIASOUPCLIENT_LOG_DEV=ON"
            }
        }

        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your APK.
            abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        cmake {
            // Provides a relative path to your CMake build script.
            path "CMakeLists.txt"
        }
    }

    publishing {
        singleVariant("release") {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    api fileTree(dir: WEBRTC_LIB_PATH, include: ['libwebrtc.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://s01.oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

afterEvaluate {
publishing {
    publications {
        aar(MavenPublication) {
            from components.release
            pom {
                name = POM_NAME
                version = POM_VERSION
                groupId = POM_GROUP
                packaging = POM_PACKAGING
                artifactId = POM_ARTIFACT_ID
                description = POM_DESCRIPTION
                url = POM_URL

                scm {
                    url = POM_SCM_URL
                    connection = POM_SCM_CONNECTION
                    developerConnection = POM_SCM_DEV_CONNECTION
                }

                licenses {
                    license {
                        name = POM_LICENCE_NAME
                        url = POM_LICENCE_URL
                        distribution = POM_LICENCE_DIST
                    }
                }

                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                        email = POM_DEVELOPER_EMAIL
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url = POM_VERSION.endsWith("SNAPSHOT") ? getSnapshotRepositoryUrl() : getReleaseRepositoryUrl()
            credentials {
                username = getRepositoryUsername()
                password = getRepositoryPassword()
            }
        }
    }
}

signing {
    sign javaDocReleaseJar
    sign sourceReleaseJar
    sign publishing.publications.aar
}
}
